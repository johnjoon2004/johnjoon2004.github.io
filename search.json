[
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Order By\n      Default\n      \n        Date - Oldest\n      \n      \n        Date - Newest\n      \n      \n        Author\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nFact Check Agent\n\n\n\n\n\nAgent service protype implementation based on LangGraph etc.\n\n\n\n\n\n2025 06 06\n\n\njohnjoon2004\n\n1 min\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2025-06-08-team_distance.html",
    "href": "posts/2025-06-08-team_distance.html",
    "title": "Calculating ‘Team-Attention’ within Company using Viewer Statistics of Intranet Posts",
    "section": "",
    "text": "THIS IS IMPORTANT\n\n\n\n데이터 크롤링에 앞서, 어떠한 데이터를 수집하더라도 실행 전 반드시 해당 사이트 및 조직의 크롤링 정책을 확인하고, 수집 동작이 운영에 지장이 없도록 각별히 주의해야 합니다. 또한 수집 시 개인정보를 회피하여, 이것이 아예 크롤링 프로세스에 인입되지 않도록 구현하는 것이 좋습니다.\n본 실험에 활용된 데이터는 수집 전 상급자 및 인프라 담당자의 동의를 거쳤으며, 수집된 데이터에는 민감 정보가 일체 포함되어 있지 않습니다. 해당 데이터는 회사의 정책에 따라 외부에 노출, 전송, 복사 등이 이뤄지지 않고 있으며, 실험 목적 외에는 사용되지 않습니다."
  },
  {
    "objectID": "posts/2025-06-08-team_distance.html#실험-설명",
    "href": "posts/2025-06-08-team_distance.html#실험-설명",
    "title": "Calculating ‘Team-Attention’ within Company using Viewer Statistics of Intranet Posts",
    "section": "1. 실험 설명",
    "text": "1. 실험 설명\n최근, 저의 회사에서는 사무실 확장과 함께 부서별 공간 재배치 작업이 있었습니다. 이 과정에서, 비록 각 부서간 업무 관련성을 기준으로 배치를 진행하는 노력이 있었으나, 이를 정량적으로 평가할 수 있는 기준이 부재했던 아쉬움이 있었습니다. 즉, 각 부서가 서로 얼마나 밀접하게 협업하는지, 소통이 얼마나 빈번하게 일어나는지를 구체적으로 측정할 수 있는 수단이 없었습니다. 본 실험은 이러한 배경 아래 진행되었습니다.\n본 실험은 회사의 인트라넷에 공개된 게시글의 조회 통계를 통해 각 팀(부서) 간의 ’관심도’를 정량적으로 추정해보는 실험입니다. 여기서 관심도란, 서로 다른 부서 사이의 업무 관련도, 협업의 강도 등으로 해석될 수 있습니다.\n대부분의 회사에는 다양한 직군과 부서들이 공존합니다. 만약 각 팀 간의 업무 관련성, 또는 협업 강도를 정량적으로 분석할 수 있는 척도가 있다면, 이를 기반으로 팀 간 협업과 커뮤니케이션 상태를 점검 및 조율하고, 조직 구성을 최적화하는 등, 기업 운영 시 매우 유용하게 활용될 여지가 있습니다.\n\n예를 들어, 회사의 사무 공간이 부득이하게 분산되어 있다고 가정해봅시다. 회사의 사무실이 총 3개의 층으로 나뉘어 있는 상태이며, 건물의 2층, 3층, 그리고 19층에 각 팀을 배치해야 하는 상황입니다. 이 때, 각 부서 간의 협업/관련 정도을 정량적으로 측정할 수 있다면, 업무 관련성이 높은 팀을 가까운 공간에 배치하고, 반대로 업무 관련성이 낮은 팀은 서로 멀리 배치하여도 무방하기에, 협업 효율을 최적화할 수 있는 공간 배치 전략을 수립할 수 있습니다."
  },
  {
    "objectID": "posts/2025-06-08-team_distance.html#기본-접근법",
    "href": "posts/2025-06-08-team_distance.html#기본-접근법",
    "title": "Calculating ‘Team-Attention’ within Company using Viewer Statistics of Intranet Posts",
    "section": "2. 기본 접근법",
    "text": "2. 기본 접근법\n회사 인트라넷의 전체 게시글 데이터를 실험 데이터셋으로 활용합니다.\n\n회사의 모든 구성원들이 통일된 플랫폼에서 모든 문서 작업을 수행하는 상황을 가정합니다.\n모든 게시글에 조회 기록이 자동으로 남겨지는 점을 활용합니다. 각 게시글은 작성자, 조회자 및 조회자별 열람 횟수 등 정보를 포함하고 있습니다. 이를 통해 작성자-조회수 맵핑을 통해 부서 간 상호작용을 모델링할 수 있습니다.\n\n일반적인 IT 기업에는 기획, 연구 개발, 운영, 인사, 영업 등 직무가 존재하며, 저희 회사 또한 이와 유사한 조직 구조를 가지고 있습니다. 때문에 회사는 다양한 유형의 업무 수행을 지원하기 위해 꽤나 많은 게시판을 인트라넷에 구축해두었고, 각 팀마다 주로 사용하는 게시판이 나뉘게 됩니다. 또한 각 게시글은 게시판 및 작성자가 속한 팀과 따라 그 내용이 상당히 다른 특성을 지니게 됩니다.\n\n따라서 각 게시판의 특성에 따라 메트릭 또는 가중치를 별도로 처리하는 과정이 필요할 수 있습니다."
  },
  {
    "objectID": "posts/2025-06-08-team_distance.html#실험-환경-세팅",
    "href": "posts/2025-06-08-team_distance.html#실험-환경-세팅",
    "title": "Calculating ‘Team-Attention’ within Company using Viewer Statistics of Intranet Posts",
    "section": "3. 실험 환경 세팅",
    "text": "3. 실험 환경 세팅\n실험에 사용될 라이브러리는 (일단은) 다음과 같습니다. 이들을 import 해줍니다.\n\nimport math\nimport re\nfrom collections import defaultdict\nfrom pprint import pprint\nfrom typing import Dict\n\nimport networkx as nx\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\n데이터를 로드해줍니다. 본 실험에서는 csv 형식의 원본 데이터 파일이 이미 확보되어 있는 상태를 가정합니다.\n\ndata = pd.read_csv(\"../private/post_250608_team_distance/company_posts.csv\")"
  },
  {
    "objectID": "posts/2025-06-08-team_distance.html#데이터-분석eda-및-전처리",
    "href": "posts/2025-06-08-team_distance.html#데이터-분석eda-및-전처리",
    "title": "Calculating ‘Team-Attention’ within Company using Viewer Statistics of Intranet Posts",
    "section": "4. 데이터 분석(EDA) 및 전처리",
    "text": "4. 데이터 분석(EDA) 및 전처리\n먼저 데이터에 포함된 칼럼들을 확인해봅니다.\n\ndata.columns\n\nIndex(['Unnamed: 0', 'link', 'title', 'creator', 'board', 'text', 'readers'], dtype='object')\n\n\n각 칼럼의 의미는 다음과 같습니다:\n\n\n\n칼럼\n설명\n필요 여부\n\n\n\n\nUnnamed: 0\n게시글의 인덱스\nX\n\n\nlink\n게시글의 URL\nX\n\n\ntitle\n게시글 제목\nX\n\n\ncreator\n게시글 작성자\nO\n\n\nboard\n게시글이 속한 게시판\nO\n\n\ntext\n게시글 본문\nX\n\n\nreaders\n게시글 조회자 및 조회수 목록\nO\n\n\n\n불필요한 칼럼을 제거합니다.\n\ncols_to_remove = [\"Unnamed: 0\", \"link\", \"title\", \"text\"]\ndata.drop(columns=cols_to_remove, inplace=True)\n\n게시판(board) 칼럼의 경우, 조금 더 세부적으로 분류할 필요가 있습니다.\n대부분의 게시판의 경우, 게시글들이 개인 또는 특정 팀이 대부분을 기여하지만, 특정 게시판의 경우 범-부서적 차원에서, 또는 전사 공통으로 작성/유지보수되는 경우가 있기 때문입니다. 후자에 해당하는 게시글의 경우, 여러 팀이 작성에 기여했으나, 조회수가 투영하는 모든 ’관심도’의 기여분이 특정 작성자에게 편중되는 문제가 발생할 수 있습니다. 따라서 본 실험에서는 다음과 같은 주관적 기준을 제시합니다:\n\nisolation: 개인/팀 차원에 해당한다고 판단되는 게시판의 경우 해당 그룹으로 분류하고, 모든 게시글의 조회수에 1.0 만큼의 가중치를 적용시킵니다.\nassociation: 다수의 부서/전사 차원에 해당한다고 판단되는 게시판의 경우 해당 그룹으로 분류하고, 모든 게시글의 조회수에 0.5 만큼의 가중치를 적용시킵니다.\n\n\n\n\n\n\n\nNOTE\n\n\n\n이는 굉장히 naive하고 주관적인 방식이지만, 본 실험에서는 이 이상으로 deep dive하지 않습니다.😿\n\n\n위와 같은 기준에 따라 게시판 유형(board_type) 태그를 데이터셋에 새로운 칼럼으로 추가하고, 불필요한 게시판 항목은 제거합니다. (전체 게시판 정보를 출력할 수 없는 점 양해 바랍니다)\n\nimport sys\nif \"..\" not in sys.path:\n    sys.path.append(\"..\")\nfrom private.post_250608_team_distance.board_categories import boards_isolation, boards_association\n\n\nsample_isolation_boards = (\n    \"연구노트\",\n    \"개인게시판\",\n    ...\n)\n\nsample_association_boards = (\n    \"회의록\",\n    \"제품매뉴얼\",\n    ...\n)\n\n\ndata = data[data[\"board\"].isin(boards_isolation + boards_association)].reset_index(drop=True)\n\n\ndef calculate_weight_by_board(board):\n    if board in boards_isolation:\n        return 1\n    elif board in boards_association:\n        return 0.5\n    else:\n        raise\n\ndata[\"board_weight\"] = data[\"board\"].apply(calculate_weight_by_board)\n\n각 팀별 구성원(재직자) 목록을 로드합니다. 다음과 같은 형식의 json 파일로부터 목록을 불러오는 것으로 가정합니다.\n\n_employees = pd.read_json(\"../private/post_250608_team_distance/employees.json\")\n\n\nsample_employees = [\n    {\n        \"name\": \"홍길동\",\n        \"unit\": \"제1기획팀\"\n    },\n    {\n        \"name\": \"임꺽정\",\n        \"unit\": \"플랫폼개발팀\"\n    },\n    ...\n]\n\n해당 명단에 없는 작성자(퇴사자)가 작성한 게시글의 경우 제거합니다. (소속 정보를 획득할 수 없기 때문입니다)\n\ndata = data[data[\"creator\"].isin(_employees[\"name\"].tolist())].reset_index(drop=True)\n\n구성원-소속팀 정보를 매핑하고, 게시글 데이터셋에 작성자의 소속 팀 정보를 추가합니다.\n\n_unit_map = {}\n\ndef get_unit(name: str) -&gt; str:\n    if name not in _unit_map:\n        _unit_map[name] = _employees[_employees[\"name\"] == name][\"unit\"].values[0]\n    return _unit_map[name]\n\ndata[\"unit\"] = data[\"creator\"].apply(get_unit)\n\n앞서 처리한 데이터셋에는 실제 직원명 및 부서명이 포함되어 있었고, 이는 출력되면 안되는 정보들이죠.\n이를 해결하기 위해, data에 포함된 모든 실명을 Faker 라이브러리를 사용해 익명화 처리합니다.\n\nfrom faker import Faker\n\ngoat = Faker(\"ko_KR\")\n\n\n\n\ngoat\n\n\n\n_name_map = {}\n\ndef get_fake_name(real_name: str) -&gt; str:\n    if real_name not in _name_map:\n        _name_map[real_name] = goat.name()\n    return _name_map[real_name]\n\ndata[\"creator\"] = data[\"creator\"].apply(get_fake_name)\n\n\nfake_unit_map = {}\nfor name, unit in _unit_map.items():\n    fake_unit_map[get_fake_name(name)] = unit\n\n마지막으로 조회자 목록(readers)에 대한 전처리를 진행합니다.\n기존 readers 칼럼에는 아래와 같은 형식으로 ‘작성자’ + ‘조회수’가 기록되어 있습니다. 이를 파싱한 다음, 각 조회자의 소속팀 정보를 식별하여 (’조회자’, ‘팀’, ‘조회수’) 형식의 triplet을 구성하여 readers 칼럼을 업데이트합니다.\n전체 조회자 목록 예시:\n\n김철수 (5)\n나영희 (3)\n다람쥐 (1)\n…\n\n\ndef parse_readers(readers_text: str) -&gt; list[Dict[str, int]]:\n    pttn = re.compile(r\"([가-힣A-Za-z]+)\\((\\d+)\\)\")\n    readers = pttn.findall(readers_text)\n    readers_parsed = []\n    for name, count in readers:\n        if name not in _unit_map:\n            continue\n        fake_name = get_fake_name(name)\n        unit = _unit_map[name]\n        readers_parsed.append({\n            \"name\": fake_name,\n            \"unit\": unit,\n            \"count\": int(count),\n        })\n    return readers_parsed\n\ndata[\"readers\"] = data[\"readers\"].apply(parse_readers)\n\n조회수 파싱이 완료되었으면, 이제 실명이 포함된 데이터는 삭제합니다.\n\ndel _employees, _unit_map, _name_map\n\n\n\n\n\n\n\nNote\n\n\n\n앞으로 표시되는 이름은 모두 익명화 처리된 이름입니다\n\n\n전처리 완료된 데이터셋의 예시는 다음과 같습니다:\n\ndata.head()\n\n\n\n\n\n\n\n\ncreator\nboard\nreaders\nboard_weight\nunit\n\n\n\n\n0\n이현우\n개인업무계획\n[{'name': '이현우', 'unit': '제1개발팀', 'count': 233...\n1.0\n제1개발팀\n\n\n1\n이은주\n회의록\n[{'name': '권미숙', 'unit': '인공지능팀', 'count': 9},...\n0.5\n영업팀\n\n\n2\n이은주\n영업\n[{'name': '권미숙', 'unit': '인공지능팀', 'count': 11}...\n1.0\n영업팀\n\n\n3\n고재현\n개발노트\n[{'name': '권미숙', 'unit': '인공지능팀', 'count': 9},...\n1.0\n인공지능팀\n\n\n4\n고재현\n제품매뉴얼\n[{'name': '권미숙', 'unit': '인공지능팀', 'count': 9},...\n0.5\n인공지능팀\n\n\n\n\n\n\n\n조회수 데이터는 다음과 같이 파싱되어 있습니다:\n\npprint(data.iloc[0][\"readers\"][:5])\nprint(\"...\")\n\n[{'count': 233, 'name': '이현우', 'unit': '제1개발팀'},\n {'count': 19, 'name': '김정숙', 'unit': '영업팀'},\n {'count': 18, 'name': '이숙자', 'unit': '제1개발팀'},\n {'count': 15, 'name': '김광수', 'unit': 'CS팀'},\n {'count': 11, 'name': '권미숙', 'unit': '인공지능팀'}]\n...\n\n\n분석에 활용된 데이터셋의 규모는 다음과 같습니다:\n\nprint(\"데이터셋 크기: \", len(data))\n\n데이터셋 크기:  5138"
  },
  {
    "objectID": "posts/2025-06-08-team_distance.html#team-attention-계산-알고리즘",
    "href": "posts/2025-06-08-team_distance.html#team-attention-계산-알고리즘",
    "title": "Calculating ‘Team-Attention’ within Company using Viewer Statistics of Intranet Posts",
    "section": "5. Team-Attention 계산 알고리즘",
    "text": "5. Team-Attention 계산 알고리즘\n이제 본격적으로 게시글별 조회 통계를 기반으로 팀 간의 ’관심도’를 계산하는 알고리즘을 구현합니다.\n각 게시글의 조회자 목록(readers)을 순회하며, 각 팀의 총 조회수를 추산하는 방식입니다. 이 때, 다음 사항을 유의해야 합니다:\n\n조회 통계에는 본인의 열람 기록 또한 포함되어 있기 때문에, 이를 제외하고 계산해야 합니다.\n특정 게시글에 특정 인원의 조회수가 과도하게 높은 경우가 있습니다. 이는 해당 인원이 해당 게시글을 주로 유지보수하는 역할이거나, 반복적으로 팔로우업 했던것이 원인일 가능성이 높습니다. 이는 해당 팀과 게시글 간의 실제 관련성을 왜곡할 수 있으므로, Sigmoid 함수를 적용하여 과도하게 높은 조회수를 조정할 필요가 있습니다. (본 실험에서는 1~10 범위로 정규화합니다)\n이러한 정규화가 반영하는 중요한 관점은, 조회수가 없는 것과, 1회 또는 2회 정도의 조회수를 보인 것은 매우 유의미한 차이라고 볼 수 있으나, 무작정 높은 조회수를 보였다고 해서 그만큼 업무 관련성/관심도가 높다고 볼 수는 없다는 것입니다. 가령, 100회 또는 그 이상의 조회수는 사실상 10회 이상의 조회수와 구분되는 만큼의 의미를 가지지 않는다고 판단합니다. 아래의 수식은 이러한 관점을 반영합니다.\n\n\\[\n\\text{sigmoid-scaled}(x) = 1 + 9 \\times \\frac{\\sigma(\\alpha(x - 1)) - \\sigma(0)}{1 - \\sigma(0)}\n\\]\n\\[\n\\text{where} \\quad \\sigma(z) = \\frac{1}{1 + e^{-z}}\n\\]\n\ndef sigmoid(x, alpha=0.5):\n    s0 = 1 / (1 + np.exp(-alpha * (1 - 1)))\n    sX = 1 / (1 + np.exp(-alpha * (x - 1)))\n    y = 1 + 9 * (sX - s0) / (1 - s0)\n    return y\n\ndef sigmoid_count(readers: list[dict]):\n    return [{**reader, \"count\": sigmoid(reader[\"count\"])} for reader in readers]\n\ndata[\"readers\"] = data[\"readers\"].apply(sigmoid_count)\n\n위를 실행하면 조회수가 다음과 같이 0 ~ 10 범위로 정규화됩니다:\n\npprint(data.iloc[0][\"readers\"][:5])\nprint(\"...\")\n\n[{'count': np.float64(10.0), 'name': '이현우', 'unit': '제1개발팀'},\n {'count': np.float64(9.997778897632246), 'name': '김정숙', 'unit': '영업팀'},\n {'count': np.float64(9.996338314395006), 'name': '이숙자', 'unit': '제1개발팀'},\n {'count': np.float64(9.98360107850079), 'name': '김광수', 'unit': 'CS팀'},\n {'count': np.float64(9.879528683362874), 'name': '권미숙', 'unit': '인공지능팀'}]\n...\n\n\n이제 팀 간 전체 ‘관심도’(unit_total_attention)를 계산합니다.\n먼저 각 게시글의 작성자(creator)와 조회자(reader)의 소속 팀을 쌍(tuple)로 묶어 ’관심 방향’을 벡터화 표현하고, 관심의 ’강도’를 정규화가 적용된 조회수, 그리고 게시판의 가중치를 곱하는 방식으로 계산합니다.\n\nunit_total_attentions = defaultdict(float)\nfor _, post in data.iterrows():\n    unit1 = post[\"unit\"]\n    board_weight = post[\"board_weight\"]\n    for reader in post[\"readers\"]:\n        unit2 = reader[\"unit\"]\n        unit_total_attentions[(unit1, unit2)] += reader[\"count\"] * board_weight\n\n그런 다음, 팀별 구성원의 수를 전체 관심도(unit_total_attention)에 나누어 평균 관심도(unit_avg_attention)를 얻습니다.\n\nunit_set = data[\"unit\"].unique().tolist()\n\nunit_avg_attentions = defaultdict(float)\nfor unit1 in unit_set:\n    unit_members = data[data[\"unit\"] == unit1][\"creator\"].unique().tolist()\n    term = len(unit_members)\n    for unit2 in unit_set:\n        vec = (unit1, unit2)\n        unit_avg_attentions[vec] = unit_total_attentions[vec] / term\n\n드물긴 하지만, 만약 어떤 팀이 다른 특정 팀에 대한 조회수가 0일 경우(즉, 관심도가 0), 이를 명시해줍니다.\n\nfor unit1 in unit_set:\n    for unit2 in unit_set:\n        if (unit1, unit2) not in unit_avg_attentions:\n            unit_avg_attentions[(unit1, unit2)] = 0.0\n\n앞서 계산한 ‘관심도’는 방향성이 있습니다. 두 팀 간의 관심도를 결합하는 방식으로 두 팀 사이의 ’상호 관심도’(unit_avg_attentions_bi)를 계산해봅시다. 계산된 ’상호 관심도’는 멱등성을 지니게 됩니다.\n\nunit_avg_attentions_bi = defaultdict(float)\nfor unit1 in unit_set:\n    for unit2 in unit_set:\n        vec = tuple(sorted([unit1, unit2]))\n        avg_attn_score = unit_avg_attentions[vec]\n        unit_avg_attentions_bi[vec] += avg_attn_score\n\n계산된 조합이 맞는지 확인해봅니다.\n\nassert len(unit_avg_attentions_bi.keys()) == math.comb(len(unit_set) + 1, 2)\n\n에러가 발생하지 않았습니다. 모든 팀 사이의 ‘상호 관심도’ 값이 올바르게 매핑된 것 같습니다."
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "Order By\n      Default\n      \n        Date - Oldest\n      \n      \n        Date - Newest\n      \n      \n        Author\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nCalculating ‘Team-Attention’ within Company using Viewer Statistics of Intranet Posts\n\n\n\n\n\n게시글의 조회수 분석을 통해 사내 부서 간의 ‘관심도’(또는, 업무 관련성)를 추정해보는 실험입니다.\n\n\n\n\n\n2025 06 08\n\n\njohnjoon2004\n\n7 min\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "johnjoon2004",
    "section": "",
    "text": "Introduction I’m an unremarkable AI researcher/engineer, full of contradictions — an introvert and an attention-seeker; a perfectionist and a procrastinator; a principled rule-follower who prefers the unconventional; a mix of narcissism and self-criticism — all bundled up in a cloud of uncertainty. Honestly, I don’t even have a clear grasp of myself. But if there’s one thing I can be sure about, it’s that anyone who has ever tried to guess my MBTI has never failed to see that it’s INTJ.\nContributing The low-quality sentences are written by me, and the well-written posts are gracefully given by ChatGPT."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "johnjoon's blog",
    "section": "",
    "text": "A junior AI researcher/engineer in NLP domain.\nCurrent interest is the advancement and efficiency of the agentic systems.\nRead more about me here.\n\n \n  \n   \n  \n    \n     github\n  \n  \n    \n     linkedin\n  \n\n\n\n\nBlog\nClick here to check out the latest on the blog.\n\n\n\n\n\n\n\n\n\n\nCalculating ‘Team-Attention’ within Company using Viewer Statistics of Intranet Posts\n\n\n게시글의 조회수 분석을 통해 사내 부서 간의 ‘관심도’(또는, 업무 관련성)를 추정해보는 실험입니다.\n\n\n\n\n\nJun 8, 2025\n\n\njohnjoon2004\n\n\n\n\n\nNo matching items\n\n\n\nProjects\nClick here to check out my projects.\n\n\n\n\n\n\n\n\n\n\n\n   \n    \n    \n      Order By\n      Default\n      \n        Date - Oldest\n      \n      \n        Date - Newest\n      \n      \n        Title\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\nTitle\n\n\n\nDescription\n\n\n\nDate\n\n\n\n\n\n\n\n\nFact Check Agent\n\n\nAgent service protype implementation based on LangGraph etc.\n\n\nJun 6, 2025\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "projects/20250606.test.html",
    "href": "projects/20250606.test.html",
    "title": "Fact Check Agent",
    "section": "",
    "text": "Lorem Ipsum"
  }
]